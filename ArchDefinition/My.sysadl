Model SysADLModel ; package INHABS_Types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } value type Transaction { } value type Block { } value type Task { } value type SmartContract extends Task { } value type SimpleTask extends Task { } value type CompositeTask extends Task { } value type Configuration { } value type Message { } value type Command { } datatype VectorTasks { attributes : tasks : Task ; } value type SystemDescription { } datatype TaskMapping { attributes : system : SystemDescription ; taks : VectorTasks ; } enum Status { on , off } datatype SystemStatus { attributes : status : Status ; } datatype TrigersCompositeTask { attributes : compositeTask : CompositeTask ; trigger : Trigger ; } value type Trigger { } value type Query { } value type SystemID { } value type VectorBlock { } datatype LinkBlocks { attributes : t : Transaction ; blocks : VectorBlock ; sid : SystemID ; } } package INHABS_Connectors { import INHABS_Ports ; import INHABS_Compents ; import INHABS_Types ; connector def TaskCN { participants : ~ pi : TaskIPT ; ~ po : TaskOPT ; flows : Task from po to pi } connector def TransactionCN { participants : ~ pi : TransactionIPT ; ~ po : TransactionOPT ; flows : Transaction from po to pi }  connector def ConfigurationCN { participants : ~ pi : ConfigurationIPT ; ~ po : ConfigurationOPT ; flows : Configuration from po to pi } connector def CompositeTaskCN { participants : ~ po : CompositeTaskIPT ; ~ pi : CompositeTaskOPT ; flows : CompositeTask from po to pi } connector def SmartContractCN { participants : ~ pi : SmartContractIPT ; ~ po : SmartContractOPT ; flows : SimpleTask from po to pi } connector def SimpleTaskCN { participants : ~ pi : SimpleTaskIPT ; ~ po : SimpleTaskOPT ; flows : SimpleTask from po to pi } connector def MessageCN { participants : ~ pi : MessageIPT ; ~ po : MessageOPT ; flows : Message from po to pi } connector def VectortasksCN { participants : ~ pi : VectorTasksIPT ; ~ po : VectorTasksOPT ; flows : VectorTasks from po to pi } connector def BlockCN { participants : ~ pi : BlockIPT ; ~ po : BlockOPT ; flows : Block from po to pi } connector def TaskMappingCN { participants : ~ pi : TaskMappingIPT ; ~ po : TaskMappingOPT ; flows : TaskMapping from po to pi } connector def SystemStatusCN { participants : ~ pi : SysStatusIPT ; ~ po : SysStatusOPT ; flows : SystemStatus from po to pi } connector def LinkBlocksCN { participants : ~ pi : LinkBlocksIPT ; ~ po : LinkBlocksOPT ; flows : LinkBlocks from po to pi } } package INHABS_Compents { import INHABS_Ports ; import INHABS_Types ; import INHABS_Connectors ;
	component def INHABS_Level3 { ports : p22 : TaskIPT ; p21 : TransactionOPT ; configuration { components :            LCL3 : LevelComposerCP { using ports : p10 : CompositeTaskOPT ; p11 : VectorTasksIPT ; p229 : TaskMappingOPT ; } LCL3 : LevelOrchestratorCP { using ports : p15 : CompositeTaskIPT ; p17 : ConfigurationIPT ; p18 : SysStatusIPT ; p16 : TaskMappingIPT ; p14 : CommandOPT ; pO1 : TriggersCompositeTaskOPT ; } LinkingBlockchainCP : LinkingBlockchainCP { using ports : p51 : LinkBlocksIPT ; } BL2L3 : BlockchainNodeCP { using ports : p12 : TransactionIPT ; p13 : BlockIPT ; p23 : BlockOPT ; p27 : TransactionOPT ; } BCS1L3 : BlockchainNodeCP { using ports : p12 : TransactionIPT ; p13 : BlockIPT ; p23 : BlockOPT ; p27 : TransactionOPT ; } BCS2L3 : BlockchainNodeCP { using ports : p12 : TransactionIPT ; p13 : BlockIPT ; p23 : BlockOPT ; p27 : TransactionOPT ; } BrokerCP : BrokerCP { using ports : p1 : MessageIPT ; p2 : BlockOPT ; p23 : TransactionIPT ; p24 : TaskIPT ; p29 : TaskOPT ; p30 : VectorTasksIPT ; p31 : VectorTasksOPT ; p32 : ConfigurationOPT ; p33 : TransactionOPT ; p34 : BlockIPT ; } L2 : Level2CP { using ports : p19 : TaskIPT ; p20 : TransactionOPT ; } S1L3 : SmartCitySystem { using ports : p3 : TaskIPT ; p4 : TransactionOPT ; } S2L3 : SmartCitySystem { using ports : p3 : TaskIPT ; p4 : TransactionOPT ; } APL2L3 : AdapterCP { using ports : p7 : TransactionIPT ; p8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; p60 : TaskIPT ; } APS1L3 : AdapterCP { using ports : p7 : TransactionIPT ; p8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; p60 : TaskIPT ; } APS2L3 : AdapterCP { using ports : p7 : TransactionIPT ; p8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; p60 : TaskIPT ; } } } boundary
	component def SmartCitySystem { ports : p3 : TaskIPT ; p4 : TransactionOPT ; }
	component def AdapterCP { ports : p7 : TransactionIPT ; p8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; p60 : TaskIPT ; }
	component def LevelComposerCP { ports : p10 : CompositeTaskOPT ;  p11 : VectorTasksIPT ; p229 : TaskMappingOPT ; }
	component def LevelOrchestratorCP { ports : p15 : CompositeTaskIPT ; p17 : ConfigurationIPT ; p18 : SysStatusIPT ; p16 : TaskMappingIPT ; p14 : CommandOPT ; pO1 : TriggersCompositeTaskOPT ; }
	component def BlockchainNodeCP { ports : p12 : TransactionIPT ;  p13 : BlockIPT ; p23 : BlockOPT ; p27 : TransactionOPT ; }
	component def BrokerCP { ports : p1 : MessageIPT ; p2 : BlockOPT ; p23 : TransactionIPT ; p24 : TaskIPT ; p29 : TaskOPT ; p30 : VectorTasksIPT ; p31 : VectorTasksOPT ; p32 : ConfigurationOPT ; p33 : TransactionOPT ; p34 : BlockIPT ; }
	component def Level1CP { ports : p6 : TaskIPT ; p5 : TransactionOPT ; configuration { components :             LOL1 : LevelOrchestratorCP { using ports : p15 : CompositeTaskIPT ; p17 : ConfigurationIPT ; p18 : SysStatusIPT ; p16 : TaskMappingIPT ;  p18 : TriggersCompositeTaskOPT ; } BL1 : BrokerCP { using ports : p1 : SysStatusIPT [ 1 , 10 ] ; p2 : BlockOPT ; p23 : TransactionIPT ; p24 : TaskIPT ; p29 : TaskOPT ; p30 : VectorTasksIPT ; p31 : VectorTasksOPT ; p32 : SysStatusOPT ; p33 : TransactionOPT ; p34 : BlockIPT ; } AS2L1 : AdapterCP { using ports : pa7 : TransactionIPT ; pa8 : TaskOPT ; paa9 : SysStatusOPT ; pa27 : TransactionOPT ; paaa28 : VectorTasksOPT ; } AS3L1 : AdapterCP { using ports : paa7 : TransactionIPT ; paa8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; } AS1L1 : AdapterCP { using ports : p71 : TransactionIPT ; p81 : TaskOPT ; pa9 : SysStatusOPT ; p271 : TransactionOPT ; pa28 : VectorTasksOPT ; } BS1L1 : BlockchainNodeCP { using ports : p12 : TransactionIPT ; p13 : BlockIPT ; pb23 : BlockOPT ; pb127 : TransactionOPT ; } BS2L1 : BlockchainNodeCP { using ports : pb212 : TransactionIPT ; pb213 : BlockIPT ; pb223 : BlockOPT ; pb227 : TransactionOPT ; } BS3L1 : BlockchainNodeCP { using ports : pb312 : TransactionIPT ; pb313 : TaskIPT ; pb323 : BlockOPT ; pb327 : TransactionOPT ; } S1L1 : SmartCitySystem { using ports : p3 : TaskIPT ; p4 : TransactionOPT ; } S2L2 : SmartCitySystem { using ports : p311 : TaskIPT ; p41 : TransactionOPT ; } S3L1 : SmartCitySystem { using ports : ps33 : TaskIPT ; ps34 : TransactionOPT ; } LCL1 : LevelComposerCP { using ports : p10 : CompositeTaskOPT ; p11 : VectorTasksIPT ; p229 : TaskMappingOPT ; } connectors : c : TaskCN bindings p81 = p3 ; c : TransactionCN bindings p71 = p4 ; c : TransactionCN bindings p271 = p23 ; c : TransactionCN bindings p41 = pa7 ; c : TaskCN bindings pa8 = p311 ; c : TransactionCN bindings ps34 = paa7 ; c : TaskCN bindings paa8 = ps33 ; c : SystemStatusCN bindings pa9 = p1 ; c : SystemStatusCN bindings paa9 = p1 ; c : SystemStatusCN bindings p9 = p1 ; c : VectortasksCN bindings pa28 = p30 ; c : VectortasksCN bindings paaa28 = p30 ; c : VectortasksCN bindings p28 = p30 ; c : VectortasksCN bindings pa27 = p30 ; c : VectortasksCN bindings p27 = p23 ; c : VectortasksCN bindings p31 = p11 ; c : CompositeTaskCN bindings p10 = p15 ; c : TaskMappingCN bindings p229 = p16 ; c : SystemStatusCN bindings p32 = p18 ; cc : BlockCN bindings pb23 = p34 ; c : TransactionCN bindings p33 = p12 ; c : TransactionCN bindings pb227 = pb312 ; c : BlockCN bindings pb323 = pb213 ; c : BlockCN bindings pb223 = p13 ; c : TransactionCN bindings pb127 = pb212 ; c : BlockCN bindings p2 = pb213 ; delegations : pb313 to p6 pb327 to p5 } }
	component def Level2CP { ports : p19 : TaskIPT ; p20 : TransactionOPT ; configuration { components :             L1CP : Level1CP { using ports : p6 : TaskIPT ; p5 : TransactionOPT ; } S1L2 : SmartCitySystem { using ports : p3 : TaskIPT ; p4 : TransactionOPT ; } S2L2 : SmartCitySystem { using ports : p3 : TaskIPT ; p4 : TransactionOPT ; } ADL1 : AdapterCP { using ports : p7 : TransactionIPT ; p8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; p60 : TaskIPT ; } ADS1L2 : AdapterCP { using ports : p7 : TransactionIPT ; p8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; p60 : TaskIPT ; } ADS2L2 : AdapterCP { using ports : p7 : TransactionIPT ; p8 : TaskOPT ; p9 : SysStatusOPT ; p27 : TransactionOPT ; p28 : VectorTasksOPT ; p60 : TaskIPT ; } BL2 : BrokerCP { using ports : p1 : MessageIPT ; p2 : BlockOPT ; p23 : TransactionIPT ; p24 : TaskIPT ; p29 : TaskOPT ; p30 : VectorTasksIPT ; p31 : VectorTasksOPT ; p32 : ConfigurationOPT ; p33 : TransactionOPT ; p34 : BlockIPT ; } BCL1 : BlockchainNodeCP { using ports : p12 : TransactionIPT ; p13 : BlockIPT ; p23 : BlockOPT ; p27 : TransactionOPT ; } BCS1L2 : BlockchainNodeCP { using ports : p12 : TransactionIPT ; p13 : BlockIPT ; p23 : BlockOPT ; p27 : TransactionOPT ; } BCS2L2 : BlockchainNodeCP { using ports : p12 : TransactionIPT ; p13 : BlockIPT ; p23 : BlockOPT ; p27 : TransactionOPT ; } MNL2 : LevelOrchestratorCP { using ports : p15 : CompositeTaskIPT ; p17 : ConfigurationIPT ; p18 : SysStatusIPT ; p16 : TaskMappingIPT ; p14 : CommandOPT ; pO1 : TriggersCompositeTaskOPT ; } LCL2 : LevelComposerCP { using ports : p10 : CompositeTaskOPT ; p11 : VectorTasksIPT ; p229 : TaskMappingOPT ; } } }
	component def LinkingBlockchainCP { ports : p51 : LinkBlocksIPT ; } } package INHABS_Ports { import INHABS_Types ; port def TaskIPT { flow in Task } port def TaskOPT { flow out Task } port def TransactionIPT { flow in Transaction } port def TransactionOPT { flow out Transaction } port def BlockIPT { flow in Block }  port def CompositeTaskIPT { flow in CompositeTask } port def CompositeTaskOPT { flow out CompositeTask } port def SmartContractIPT { flow in SmartContract } port def SmartContractOPT { flow out SimpleTask } port def SimpleTaskIPT { flow in SimpleTask } port def SimpleTaskOPT { flow out SimpleTask } port def ConfigurationIPT { flow in Configuration } port def ConfigurationOPT { flow out Configuration } port def MessageIPT { flow in Message }  port def CommandIPT { flow in Command }  port def CommandOPT { flow out Command } port def SysDescriptionIPT { flow in SystemDescription } port def SysDescriptionOPT { flow out SystemDescription } port def SysStatusIPT { flow in SystemStatus } port def SysStatusOPT { flow out SystemStatus } port def TaskMappingIPT { flow in TaskMapping } port def TaskMappingOPT { flow out TaskMapping } port def QueryIPT { flow in Query } port def QueryOPT { flow out Query } port def VectorTasksIPT { flow in VectorTasks } port def VectorTasksOPT { flow out VectorTasks } port def TriggersCompositeTaskIPT { flow in TrigersCompositeTask } port def TriggersCompositeTaskOPT { flow out TrigersCompositeTask } port def BlockOPT { flow out Block } port def MessageOPT { flow out Message } port def LinkBlocksIPT { flow in LinkBlocks } port def LinkBlocksOPT { flow out LinkBlocks } }